'INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning disable 1591
'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.4918
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------


Imports Microsoft.VisualBasic
	Imports System.Data.Linq
	Imports System.Data.Linq.Mapping
	Imports System.Data
	Imports System.Collections.Generic
	Imports System.Reflection
	Imports System.Linq
	Imports System.Linq.Expressions
	Imports System.ComponentModel
	Imports System
Namespace sampleLinqApp


	<System.Data.Linq.Mapping.DatabaseAttribute(Name:="Northwind")> _
	Partial Public Class northwindDataContext
		Inherits System.Data.Linq.DataContext

		Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub InsertCustomer(ByVal instance As Customer)
	End Sub
	Partial Private Sub UpdateCustomer(ByVal instance As Customer)
	End Sub
	Partial Private Sub DeleteCustomer(ByVal instance As Customer)
	End Sub
	Partial Private Sub InsertOrder(ByVal instance As Order)
	End Sub
	Partial Private Sub UpdateOrder(ByVal instance As Order)
	End Sub
	Partial Private Sub DeleteOrder(ByVal instance As Order)
	End Sub
	Partial Private Sub InsertProduct(ByVal instance As Product)
	End Sub
	Partial Private Sub UpdateProduct(ByVal instance As Product)
	End Sub
	Partial Private Sub DeleteProduct(ByVal instance As Product)
	End Sub
	Partial Private Sub InsertCategory(ByVal instance As Category)
	End Sub
	Partial Private Sub UpdateCategory(ByVal instance As Category)
	End Sub
	Partial Private Sub DeleteCategory(ByVal instance As Category)
	End Sub
	#End Region

		Public Sub New()
			MyBase.New(My.Settings.Default.NorthwindConnectionString, mappingSource)
			OnCreated()
		End Sub

		Public Sub New(ByVal connection As String)
			MyBase.New(connection, mappingSource)
			OnCreated()
		End Sub

		Public Sub New(ByVal connection As System.Data.IDbConnection)
			MyBase.New(connection, mappingSource)
			OnCreated()
		End Sub

		Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated()
		End Sub

		Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated()
		End Sub

		Public ReadOnly Property Customers() As System.Data.Linq.Table(Of Customer)
			Get
				Return Me.GetTable(Of Customer)()
			End Get
		End Property

		Public ReadOnly Property Orders() As System.Data.Linq.Table(Of Order)
			Get
				Return Me.GetTable(Of Order)()
			End Get
		End Property

		Public ReadOnly Property Products() As System.Data.Linq.Table(Of Product)
			Get
				Return Me.GetTable(Of Product)()
			End Get
		End Property

		Public ReadOnly Property Categories() As System.Data.Linq.Table(Of Category)
			Get
				Return Me.GetTable(Of Category)()
			End Get
		End Property
	End Class

	<Table(Name:="dbo.Customers")> _
	Partial Public Class Customer
		Implements INotifyPropertyChanging, INotifyPropertyChanged

		Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

		Private _CustomerID As String

		Private _CompanyName As String

		Private _ContactName As String

		Private _ContactTitle As String

		Private _Address As String

		Private _City As String

		Private _Region As String

		Private _PostalCode As String

		Private _Country As String

		Private _Phone As String

		Private _Fax As String

		Private _Orders As EntitySet(Of Order)

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnCustomerIDChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnCustomerIDChanged()
	End Sub
	Partial Private Sub OnCompanyNameChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnCompanyNameChanged()
	End Sub
	Partial Private Sub OnContactNameChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnContactNameChanged()
	End Sub
	Partial Private Sub OnContactTitleChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnContactTitleChanged()
	End Sub
	Partial Private Sub OnAddressChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnAddressChanged()
	End Sub
	Partial Private Sub OnCityChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnCityChanged()
	End Sub
	Partial Private Sub OnRegionChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnRegionChanged()
	End Sub
	Partial Private Sub OnPostalCodeChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnPostalCodeChanged()
	End Sub
	Partial Private Sub OnCountryChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnCountryChanged()
	End Sub
	Partial Private Sub OnPhoneChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnPhoneChanged()
	End Sub
	Partial Private Sub OnFaxChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnFaxChanged()
	End Sub
	#End Region

		Public Sub New()
			Me._Orders = New EntitySet(Of Order)(New Action(Of Order)(AddressOf Me.attach_Orders), New Action(Of Order)(AddressOf Me.detach_Orders))
			OnCreated()
		End Sub

		<Column(Storage:="_CustomerID", DbType:="NChar(5) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)> _
		Public Property CustomerID() As String
			Get
				Return Me._CustomerID
			End Get
			Set(ByVal value As String)
				If (Me._CustomerID <> value) Then
					Me.OnCustomerIDChanging(value)
					Me.SendPropertyChanging()
					Me._CustomerID = value
					Me.SendPropertyChanged("CustomerID")
					Me.OnCustomerIDChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_CompanyName", DbType:="NVarChar(40) NOT NULL", CanBeNull:=False)> _
		Public Property CompanyName() As String
			Get
				Return Me._CompanyName
			End Get
			Set(ByVal value As String)
				If (Me._CompanyName <> value) Then
					Me.OnCompanyNameChanging(value)
					Me.SendPropertyChanging()
					Me._CompanyName = value
					Me.SendPropertyChanged("CompanyName")
					Me.OnCompanyNameChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_ContactName", DbType:="NVarChar(30)")> _
		Public Property ContactName() As String
			Get
				Return Me._ContactName
			End Get
			Set(ByVal value As String)
				If (Me._ContactName <> value) Then
					Me.OnContactNameChanging(value)
					Me.SendPropertyChanging()
					Me._ContactName = value
					Me.SendPropertyChanged("ContactName")
					Me.OnContactNameChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_ContactTitle", DbType:="NVarChar(30)")> _
		Public Property ContactTitle() As String
			Get
				Return Me._ContactTitle
			End Get
			Set(ByVal value As String)
				If (Me._ContactTitle <> value) Then
					Me.OnContactTitleChanging(value)
					Me.SendPropertyChanging()
					Me._ContactTitle = value
					Me.SendPropertyChanged("ContactTitle")
					Me.OnContactTitleChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_Address", DbType:="NVarChar(60)")> _
		Public Property Address() As String
			Get
				Return Me._Address
			End Get
			Set(ByVal value As String)
				If (Me._Address <> value) Then
					Me.OnAddressChanging(value)
					Me.SendPropertyChanging()
					Me._Address = value
					Me.SendPropertyChanged("Address")
					Me.OnAddressChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_City", DbType:="NVarChar(15)")> _
		Public Property City() As String
			Get
				Return Me._City
			End Get
			Set(ByVal value As String)
				If (Me._City <> value) Then
					Me.OnCityChanging(value)
					Me.SendPropertyChanging()
					Me._City = value
					Me.SendPropertyChanged("City")
					Me.OnCityChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_Region", DbType:="NVarChar(15)")> _
		Public Property Region() As String
			Get
				Return Me._Region
			End Get
			Set(ByVal value As String)
				If (Me._Region <> value) Then
					Me.OnRegionChanging(value)
					Me.SendPropertyChanging()
					Me._Region = value
					Me.SendPropertyChanged("Region")
					Me.OnRegionChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_PostalCode", DbType:="NVarChar(10)")> _
		Public Property PostalCode() As String
			Get
				Return Me._PostalCode
			End Get
			Set(ByVal value As String)
				If (Me._PostalCode <> value) Then
					Me.OnPostalCodeChanging(value)
					Me.SendPropertyChanging()
					Me._PostalCode = value
					Me.SendPropertyChanged("PostalCode")
					Me.OnPostalCodeChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_Country", DbType:="NVarChar(15)")> _
		Public Property Country() As String
			Get
				Return Me._Country
			End Get
			Set(ByVal value As String)
				If (Me._Country <> value) Then
					Me.OnCountryChanging(value)
					Me.SendPropertyChanging()
					Me._Country = value
					Me.SendPropertyChanged("Country")
					Me.OnCountryChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_Phone", DbType:="NVarChar(24)")> _
		Public Property Phone() As String
			Get
				Return Me._Phone
			End Get
			Set(ByVal value As String)
				If (Me._Phone <> value) Then
					Me.OnPhoneChanging(value)
					Me.SendPropertyChanging()
					Me._Phone = value
					Me.SendPropertyChanged("Phone")
					Me.OnPhoneChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_Fax", DbType:="NVarChar(24)")> _
		Public Property Fax() As String
			Get
				Return Me._Fax
			End Get
			Set(ByVal value As String)
				If (Me._Fax <> value) Then
					Me.OnFaxChanging(value)
					Me.SendPropertyChanging()
					Me._Fax = value
					Me.SendPropertyChanged("Fax")
					Me.OnFaxChanged()
				End If
			End Set
		End Property

		<Association(Name:="Customer_Order", Storage:="_Orders", ThisKey:="CustomerID", OtherKey:="CustomerID")> _
		Public Property Orders() As EntitySet(Of Order)
			Get
				Return Me._Orders
			End Get
			Set(ByVal value As EntitySet(Of Order))
				Me._Orders.Assign(value)
			End Set
		End Property

		Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

		Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

		Protected Overridable Sub SendPropertyChanging()
			If (Me.PropertyChangingEvent IsNot Nothing) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub

		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
			If (Me.PropertyChangedEvent IsNot Nothing) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub

		Private Sub attach_Orders(ByVal entity As Order)
			Me.SendPropertyChanging()
			entity.Customer = Me
		End Sub

		Private Sub detach_Orders(ByVal entity As Order)
			Me.SendPropertyChanging()
			entity.Customer = Nothing
		End Sub
	End Class

	<Table(Name:="dbo.Orders")> _
	Partial Public Class Order
		Implements INotifyPropertyChanging, INotifyPropertyChanged

		Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

		Private _OrderID As Integer

		Private _CustomerID As String

		Private _EmployeeID? As Integer

		Private _OrderDate? As System.DateTime

		Private _RequiredDate? As System.DateTime

		Private _ShippedDate? As System.DateTime

		Private _ShipVia? As Integer

		Private _Freight? As Decimal

		Private _ShipName As String

		Private _ShipAddress As String

		Private _ShipCity As String

		Private _ShipRegion As String

		Private _ShipPostalCode As String

		Private _ShipCountry As String

		Private _Customer As EntityRef(Of Customer)

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnOrderIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnOrderIDChanged()
	End Sub
	Partial Private Sub OnCustomerIDChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnCustomerIDChanged()
	End Sub
	Partial Private Sub OnEmployeeIDChanging(ByVal value? As Integer)
	End Sub
	Partial Private Sub OnEmployeeIDChanged()
	End Sub
	Partial Private Sub OnOrderDateChanging(ByVal value? As System.DateTime)
	End Sub
	Partial Private Sub OnOrderDateChanged()
	End Sub
	Partial Private Sub OnRequiredDateChanging(ByVal value? As System.DateTime)
	End Sub
	Partial Private Sub OnRequiredDateChanged()
	End Sub
	Partial Private Sub OnShippedDateChanging(ByVal value? As System.DateTime)
	End Sub
	Partial Private Sub OnShippedDateChanged()
	End Sub
	Partial Private Sub OnShipViaChanging(ByVal value? As Integer)
	End Sub
	Partial Private Sub OnShipViaChanged()
	End Sub
	Partial Private Sub OnFreightChanging(ByVal value? As Decimal)
	End Sub
	Partial Private Sub OnFreightChanged()
	End Sub
	Partial Private Sub OnShipNameChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnShipNameChanged()
	End Sub
	Partial Private Sub OnShipAddressChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnShipAddressChanged()
	End Sub
	Partial Private Sub OnShipCityChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnShipCityChanged()
	End Sub
	Partial Private Sub OnShipRegionChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnShipRegionChanged()
	End Sub
	Partial Private Sub OnShipPostalCodeChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnShipPostalCodeChanged()
	End Sub
	Partial Private Sub OnShipCountryChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnShipCountryChanged()
	End Sub
	#End Region

		Public Sub New()
			Me._Customer = Nothing
			OnCreated()
		End Sub

		<Column(Storage:="_OrderID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
		Public Property OrderID() As Integer
			Get
				Return Me._OrderID
			End Get
			Set(ByVal value As Integer)
				If (Me._OrderID <> value) Then
					Me.OnOrderIDChanging(value)
					Me.SendPropertyChanging()
					Me._OrderID = value
					Me.SendPropertyChanged("OrderID")
					Me.OnOrderIDChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_CustomerID", DbType:="NChar(5)")> _
		Public Property CustomerID() As String
			Get
				Return Me._CustomerID
			End Get
			Set(ByVal value As String)
				If (Me._CustomerID <> value) Then
					If Me._Customer.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnCustomerIDChanging(value)
					Me.SendPropertyChanging()
					Me._CustomerID = value
					Me.SendPropertyChanged("CustomerID")
					Me.OnCustomerIDChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_EmployeeID", DbType:="Int")> _
		Public Property EmployeeID() As Integer?
			Get
				Return Me._EmployeeID
			End Get
			Set(ByVal value? As Integer)
				If (Not Me._EmployeeID.Equals(value)) Then
					Me.OnEmployeeIDChanging(value)
					Me.SendPropertyChanging()
					Me._EmployeeID = value
					Me.SendPropertyChanged("EmployeeID")
					Me.OnEmployeeIDChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_OrderDate", DbType:="DateTime")> _
		Public Property OrderDate() As System.DateTime?
			Get
				Return Me._OrderDate
			End Get
			Set(ByVal value? As System.DateTime)
				If (Not Me._OrderDate.Equals(value)) Then
					Me.OnOrderDateChanging(value)
					Me.SendPropertyChanging()
					Me._OrderDate = value
					Me.SendPropertyChanged("OrderDate")
					Me.OnOrderDateChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_RequiredDate", DbType:="DateTime")> _
		Public Property RequiredDate() As System.DateTime?
			Get
				Return Me._RequiredDate
			End Get
			Set(ByVal value? As System.DateTime)
				If (Not Me._RequiredDate.Equals(value)) Then
					Me.OnRequiredDateChanging(value)
					Me.SendPropertyChanging()
					Me._RequiredDate = value
					Me.SendPropertyChanged("RequiredDate")
					Me.OnRequiredDateChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_ShippedDate", DbType:="DateTime")> _
		Public Property ShippedDate() As System.DateTime?
			Get
				Return Me._ShippedDate
			End Get
			Set(ByVal value? As System.DateTime)
				If (Not Me._ShippedDate.Equals(value)) Then
					Me.OnShippedDateChanging(value)
					Me.SendPropertyChanging()
					Me._ShippedDate = value
					Me.SendPropertyChanged("ShippedDate")
					Me.OnShippedDateChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_ShipVia", DbType:="Int")> _
		Public Property ShipVia() As Integer?
			Get
				Return Me._ShipVia
			End Get
			Set(ByVal value? As Integer)
				If (Not Me._ShipVia.Equals(value)) Then
					Me.OnShipViaChanging(value)
					Me.SendPropertyChanging()
					Me._ShipVia = value
					Me.SendPropertyChanged("ShipVia")
					Me.OnShipViaChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_Freight", DbType:="Money")> _
		Public Property Freight() As Decimal?
			Get
				Return Me._Freight
			End Get
			Set(ByVal value? As Decimal)
				If (Not Me._Freight.Equals(value)) Then
					Me.OnFreightChanging(value)
					Me.SendPropertyChanging()
					Me._Freight = value
					Me.SendPropertyChanged("Freight")
					Me.OnFreightChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_ShipName", DbType:="NVarChar(40)")> _
		Public Property ShipName() As String
			Get
				Return Me._ShipName
			End Get
			Set(ByVal value As String)
				If (Me._ShipName <> value) Then
					Me.OnShipNameChanging(value)
					Me.SendPropertyChanging()
					Me._ShipName = value
					Me.SendPropertyChanged("ShipName")
					Me.OnShipNameChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_ShipAddress", DbType:="NVarChar(60)")> _
		Public Property ShipAddress() As String
			Get
				Return Me._ShipAddress
			End Get
			Set(ByVal value As String)
				If (Me._ShipAddress <> value) Then
					Me.OnShipAddressChanging(value)
					Me.SendPropertyChanging()
					Me._ShipAddress = value
					Me.SendPropertyChanged("ShipAddress")
					Me.OnShipAddressChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_ShipCity", DbType:="NVarChar(15)")> _
		Public Property ShipCity() As String
			Get
				Return Me._ShipCity
			End Get
			Set(ByVal value As String)
				If (Me._ShipCity <> value) Then
					Me.OnShipCityChanging(value)
					Me.SendPropertyChanging()
					Me._ShipCity = value
					Me.SendPropertyChanged("ShipCity")
					Me.OnShipCityChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_ShipRegion", DbType:="NVarChar(15)")> _
		Public Property ShipRegion() As String
			Get
				Return Me._ShipRegion
			End Get
			Set(ByVal value As String)
				If (Me._ShipRegion <> value) Then
					Me.OnShipRegionChanging(value)
					Me.SendPropertyChanging()
					Me._ShipRegion = value
					Me.SendPropertyChanged("ShipRegion")
					Me.OnShipRegionChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_ShipPostalCode", DbType:="NVarChar(10)")> _
		Public Property ShipPostalCode() As String
			Get
				Return Me._ShipPostalCode
			End Get
			Set(ByVal value As String)
				If (Me._ShipPostalCode <> value) Then
					Me.OnShipPostalCodeChanging(value)
					Me.SendPropertyChanging()
					Me._ShipPostalCode = value
					Me.SendPropertyChanged("ShipPostalCode")
					Me.OnShipPostalCodeChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_ShipCountry", DbType:="NVarChar(15)")> _
		Public Property ShipCountry() As String
			Get
				Return Me._ShipCountry
			End Get
			Set(ByVal value As String)
				If (Me._ShipCountry <> value) Then
					Me.OnShipCountryChanging(value)
					Me.SendPropertyChanging()
					Me._ShipCountry = value
					Me.SendPropertyChanged("ShipCountry")
					Me.OnShipCountryChanged()
				End If
			End Set
		End Property

		<Association(Name:="Customer_Order", Storage:="_Customer", ThisKey:="CustomerID", OtherKey:="CustomerID", IsForeignKey:=True)> _
		Public Property Customer() As Customer
			Get
				Return Me._Customer.Entity
			End Get
			Set(ByVal value As Customer)
				Dim previousValue As Customer = Me._Customer.Entity
				If ((previousValue IsNot value) OrElse (Me._Customer.HasLoadedOrAssignedValue = False)) Then
					Me.SendPropertyChanging()
					If (previousValue IsNot Nothing) Then
						Me._Customer.Entity = Nothing
						previousValue.Orders.Remove(Me)
					End If
					Me._Customer.Entity = value
					If (value IsNot Nothing) Then
						value.Orders.Add(Me)
						Me._CustomerID = value.CustomerID
					Else
						Me._CustomerID = Nothing
					End If
					Me.SendPropertyChanged("Customer")
				End If
			End Set
		End Property

		Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

		Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

		Protected Overridable Sub SendPropertyChanging()
			If (Me.PropertyChangingEvent IsNot Nothing) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub

		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
			If (Me.PropertyChangedEvent IsNot Nothing) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class

	<Table(Name:="dbo.Products")> _
	Partial Public Class Product
		Implements INotifyPropertyChanging, INotifyPropertyChanged

		Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

		Private _ProductID As Integer

		Private _ProductName As String

		Private _SupplierID? As Integer

		Private _CategoryID? As Integer

		Private _QuantityPerUnit As String

		Private _UnitPrice? As Decimal

		Private _UnitsInStock? As Short

		Private _UnitsOnOrder? As Short

		Private _ReorderLevel? As Short

		Private _Discontinued As Boolean

		Private _Category As EntityRef(Of Category)

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnProductIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnProductIDChanged()
	End Sub
	Partial Private Sub OnProductNameChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnProductNameChanged()
	End Sub
	Partial Private Sub OnSupplierIDChanging(ByVal value? As Integer)
	End Sub
	Partial Private Sub OnSupplierIDChanged()
	End Sub
	Partial Private Sub OnCategoryIDChanging(ByVal value? As Integer)
	End Sub
	Partial Private Sub OnCategoryIDChanged()
	End Sub
	Partial Private Sub OnQuantityPerUnitChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnQuantityPerUnitChanged()
	End Sub
	Partial Private Sub OnUnitPriceChanging(ByVal value? As Decimal)
	End Sub
	Partial Private Sub OnUnitPriceChanged()
	End Sub
	Partial Private Sub OnUnitsInStockChanging(ByVal value? As Short)
	End Sub
	Partial Private Sub OnUnitsInStockChanged()
	End Sub
	Partial Private Sub OnUnitsOnOrderChanging(ByVal value? As Short)
	End Sub
	Partial Private Sub OnUnitsOnOrderChanged()
	End Sub
	Partial Private Sub OnReorderLevelChanging(ByVal value? As Short)
	End Sub
	Partial Private Sub OnReorderLevelChanged()
	End Sub
	Partial Private Sub OnDiscontinuedChanging(ByVal value As Boolean)
	End Sub
	Partial Private Sub OnDiscontinuedChanged()
	End Sub
	#End Region

		Public Sub New()
			Me._Category = Nothing
			OnCreated()
		End Sub

		<Column(Storage:="_ProductID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
		Public Property ProductID() As Integer
			Get
				Return Me._ProductID
			End Get
			Set(ByVal value As Integer)
				If (Me._ProductID <> value) Then
					Me.OnProductIDChanging(value)
					Me.SendPropertyChanging()
					Me._ProductID = value
					Me.SendPropertyChanged("ProductID")
					Me.OnProductIDChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_ProductName", DbType:="NVarChar(40) NOT NULL", CanBeNull:=False)> _
		Public Property ProductName() As String
			Get
				Return Me._ProductName
			End Get
			Set(ByVal value As String)
				If (Me._ProductName <> value) Then
					Me.OnProductNameChanging(value)
					Me.SendPropertyChanging()
					Me._ProductName = value
					Me.SendPropertyChanged("ProductName")
					Me.OnProductNameChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_SupplierID", DbType:="Int")> _
		Public Property SupplierID() As Integer?
			Get
				Return Me._SupplierID
			End Get
			Set(ByVal value? As Integer)
				If (Not Me._SupplierID.Equals(value)) Then
					Me.OnSupplierIDChanging(value)
					Me.SendPropertyChanging()
					Me._SupplierID = value
					Me.SendPropertyChanged("SupplierID")
					Me.OnSupplierIDChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_CategoryID", DbType:="Int")> _
		Public Property CategoryID() As Integer?
			Get
				Return Me._CategoryID
			End Get
			Set(ByVal value? As Integer)
				If (Not Me._CategoryID.Equals(value)) Then
					If Me._Category.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnCategoryIDChanging(value)
					Me.SendPropertyChanging()
					Me._CategoryID = value
					Me.SendPropertyChanged("CategoryID")
					Me.OnCategoryIDChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_QuantityPerUnit", DbType:="NVarChar(20)")> _
		Public Property QuantityPerUnit() As String
			Get
				Return Me._QuantityPerUnit
			End Get
			Set(ByVal value As String)
				If (Me._QuantityPerUnit <> value) Then
					Me.OnQuantityPerUnitChanging(value)
					Me.SendPropertyChanging()
					Me._QuantityPerUnit = value
					Me.SendPropertyChanged("QuantityPerUnit")
					Me.OnQuantityPerUnitChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_UnitPrice", DbType:="Money")> _
		Public Property UnitPrice() As Decimal?
			Get
				Return Me._UnitPrice
			End Get
			Set(ByVal value? As Decimal)
				If (Not Me._UnitPrice.Equals(value)) Then
					Me.OnUnitPriceChanging(value)
					Me.SendPropertyChanging()
					Me._UnitPrice = value
					Me.SendPropertyChanged("UnitPrice")
					Me.OnUnitPriceChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_UnitsInStock", DbType:="SmallInt")> _
		Public Property UnitsInStock() As Short?
			Get
				Return Me._UnitsInStock
			End Get
			Set(ByVal value? As Short)
				If (Not Me._UnitsInStock.Equals(value)) Then
					Me.OnUnitsInStockChanging(value)
					Me.SendPropertyChanging()
					Me._UnitsInStock = value
					Me.SendPropertyChanged("UnitsInStock")
					Me.OnUnitsInStockChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_UnitsOnOrder", DbType:="SmallInt")> _
		Public Property UnitsOnOrder() As Short?
			Get
				Return Me._UnitsOnOrder
			End Get
			Set(ByVal value? As Short)
				If (Not Me._UnitsOnOrder.Equals(value)) Then
					Me.OnUnitsOnOrderChanging(value)
					Me.SendPropertyChanging()
					Me._UnitsOnOrder = value
					Me.SendPropertyChanged("UnitsOnOrder")
					Me.OnUnitsOnOrderChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_ReorderLevel", DbType:="SmallInt")> _
		Public Property ReorderLevel() As Short?
			Get
				Return Me._ReorderLevel
			End Get
			Set(ByVal value? As Short)
				If (Not Me._ReorderLevel.Equals(value)) Then
					Me.OnReorderLevelChanging(value)
					Me.SendPropertyChanging()
					Me._ReorderLevel = value
					Me.SendPropertyChanged("ReorderLevel")
					Me.OnReorderLevelChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_Discontinued", DbType:="Bit NOT NULL")> _
		Public Property Discontinued() As Boolean
			Get
				Return Me._Discontinued
			End Get
			Set(ByVal value As Boolean)
				If (Me._Discontinued <> value) Then
					Me.OnDiscontinuedChanging(value)
					Me.SendPropertyChanging()
					Me._Discontinued = value
					Me.SendPropertyChanged("Discontinued")
					Me.OnDiscontinuedChanged()
				End If
			End Set
		End Property

		<Association(Name:="Category_Product", Storage:="_Category", ThisKey:="CategoryID", OtherKey:="CategoryID", IsForeignKey:=True)> _
		Public Property Category() As Category
			Get
				Return Me._Category.Entity
			End Get
			Set(ByVal value As Category)
				Dim previousValue As Category = Me._Category.Entity
				If ((previousValue IsNot value) OrElse (Me._Category.HasLoadedOrAssignedValue = False)) Then
					Me.SendPropertyChanging()
					If (previousValue IsNot Nothing) Then
						Me._Category.Entity = Nothing
						previousValue.Products.Remove(Me)
					End If
					Me._Category.Entity = value
					If (value IsNot Nothing) Then
						value.Products.Add(Me)
						Me._CategoryID = value.CategoryID
					Else
						Me._CategoryID = Nothing
					End If
					Me.SendPropertyChanged("Category")
				End If
			End Set
		End Property

		Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

		Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

		Protected Overridable Sub SendPropertyChanging()
			If (Me.PropertyChangingEvent IsNot Nothing) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub

		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
			If (Me.PropertyChangedEvent IsNot Nothing) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class

	<Table(Name:="dbo.Categories")> _
	Partial Public Class Category
		Implements INotifyPropertyChanging, INotifyPropertyChanged

		Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

		Private _CategoryID As Integer

		Private _CategoryName As String

		Private _Description As String

		Private _Picture As System.Data.Linq.Binary

		Private _Products As EntitySet(Of Product)

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnCategoryIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnCategoryIDChanged()
	End Sub
	Partial Private Sub OnCategoryNameChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnCategoryNameChanged()
	End Sub
	Partial Private Sub OnDescriptionChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnDescriptionChanged()
	End Sub
	Partial Private Sub OnPictureChanging(ByVal value As System.Data.Linq.Binary)
	End Sub
	Partial Private Sub OnPictureChanged()
	End Sub
	#End Region

		Public Sub New()
			Me._Products = New EntitySet(Of Product)(New Action(Of Product)(AddressOf Me.attach_Products), New Action(Of Product)(AddressOf Me.detach_Products))
			OnCreated()
		End Sub

		<Column(Storage:="_CategoryID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
		Public Property CategoryID() As Integer
			Get
				Return Me._CategoryID
			End Get
			Set(ByVal value As Integer)
				If (Me._CategoryID <> value) Then
					Me.OnCategoryIDChanging(value)
					Me.SendPropertyChanging()
					Me._CategoryID = value
					Me.SendPropertyChanged("CategoryID")
					Me.OnCategoryIDChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_CategoryName", DbType:="NVarChar(15) NOT NULL", CanBeNull:=False)> _
		Public Property CategoryName() As String
			Get
				Return Me._CategoryName
			End Get
			Set(ByVal value As String)
				If (Me._CategoryName <> value) Then
					Me.OnCategoryNameChanging(value)
					Me.SendPropertyChanging()
					Me._CategoryName = value
					Me.SendPropertyChanged("CategoryName")
					Me.OnCategoryNameChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_Description", DbType:="NText", UpdateCheck:=UpdateCheck.Never)> _
		Public Property Description() As String
			Get
				Return Me._Description
			End Get
			Set(ByVal value As String)
				If (Me._Description <> value) Then
					Me.OnDescriptionChanging(value)
					Me.SendPropertyChanging()
					Me._Description = value
					Me.SendPropertyChanged("Description")
					Me.OnDescriptionChanged()
				End If
			End Set
		End Property

		<Column(Storage:="_Picture", DbType:="Image", UpdateCheck:=UpdateCheck.Never)> _
		Public Property Picture() As System.Data.Linq.Binary
			Get
				Return Me._Picture
			End Get
			Set(ByVal value As System.Data.Linq.Binary)
				If (Me._Picture IsNot value) Then
					Me.OnPictureChanging(value)
					Me.SendPropertyChanging()
					Me._Picture = value
					Me.SendPropertyChanged("Picture")
					Me.OnPictureChanged()
				End If
			End Set
		End Property

		<Association(Name:="Category_Product", Storage:="_Products", ThisKey:="CategoryID", OtherKey:="CategoryID")> _
		Public Property Products() As EntitySet(Of Product)
			Get
				Return Me._Products
			End Get
			Set(ByVal value As EntitySet(Of Product))
				Me._Products.Assign(value)
			End Set
		End Property

		Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

		Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

		Protected Overridable Sub SendPropertyChanging()
			If (Me.PropertyChangingEvent IsNot Nothing) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub

		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
			If (Me.PropertyChangedEvent IsNot Nothing) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub

		Private Sub attach_Products(ByVal entity As Product)
			Me.SendPropertyChanging()
			entity.Category = Me
		End Sub

		Private Sub detach_Products(ByVal entity As Product)
			Me.SendPropertyChanging()
			entity.Category = Nothing
		End Sub
	End Class
End Namespace
'INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning restore 1591
